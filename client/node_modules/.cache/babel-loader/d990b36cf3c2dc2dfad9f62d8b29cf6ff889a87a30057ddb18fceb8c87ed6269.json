{"ast":null,"code":"// src/query.ts\nimport { noop, replaceData, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #retryer;\n  #observers;\n  #defaultOptions;\n  #abortSignalConsumed;\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.#observers = [];\n    this.#cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = config.state || getDefaultState(this.options);\n    this.state = this.#initialState;\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  setOptions(options) {\n    this.options = {\n      ...this.#defaultOptions,\n      ...options\n    };\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.#observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    this.#dispatch({\n      type: \"setState\",\n      state,\n      setStateOptions\n    });\n  }\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n  isActive() {\n    return this.#observers.some(observer => observer.options.enabled !== false);\n  }\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    if (this.getObserversCount() > 0) {\n      return this.#observers.some(observer => observer.getCurrentResult().isStale);\n    }\n    return this.state.data === void 0;\n  }\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    const observer = this.#observers.find(x => x.shouldFetchOnWindowFocus());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n  onOnline() {\n    const observer = this.#observers.find(x => x.shouldFetchOnReconnect());\n    observer?.refetch({\n      cancelRefetch: false\n    });\n    this.#retryer?.continue();\n  }\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({\n        type: \"observerAdded\",\n        query: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    if (this.#observers.includes(observer)) {\n      this.#observers = this.#observers.filter(x => x !== observer);\n      if (!this.#observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      this.#cache.notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer\n      });\n    }\n  }\n  getObserversCount() {\n    return this.#observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({\n        type: \"invalidate\"\n      });\n    }\n  }\n  fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({\n          silent: true\n        });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.#observers.find(x => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n      }\n    }\n    const abortController = new AbortController();\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      meta: this.meta\n    };\n    const addSignalProperty = object => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n    addSignalProperty(queryFnContext);\n    const fetchFn = () => {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (this.options.queryFn === skipToken) {\n          console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${this.options.queryHash}'`);\n        }\n      }\n      if (!this.options.queryFn || this.options.queryFn === skipToken) {\n        return Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`));\n      }\n      this.#abortSignalConsumed = false;\n      if (this.options.persister) {\n        return this.options.persister(this.options.queryFn, queryFnContext, this);\n      }\n      return this.options.queryFn(queryFnContext);\n    };\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    this.options.behavior?.onFetch(context, this);\n    this.#revertState = this.state;\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({\n        type: \"fetch\",\n        meta: context.fetchOptions?.meta\n      });\n    }\n    const onError = error => {\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        this.#cache.config.onError?.(error, this);\n        this.#cache.config.onSettled?.(this.state.data, error, this);\n      }\n      if (!this.isFetchingOptimistic) {\n        this.scheduleGc();\n      }\n      this.isFetchingOptimistic = false;\n    };\n    this.#retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: data => {\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n          }\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n        this.setData(data);\n        this.#cache.config.onSuccess?.(data, this);\n        this.#cache.config.onSettled?.(data, this.state.error, this);\n        if (!this.isFetchingOptimistic) {\n          this.scheduleGc();\n        }\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.#dispatch({\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        this.#dispatch({\n          type: \"continue\"\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    return this.#retryer.promise;\n  }\n  #dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            fetchStatus: \"paused\"\n          };\n        case \"continue\":\n          return {\n            ...state,\n            fetchStatus: \"fetching\"\n          };\n        case \"fetch\":\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...(!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n        case \"error\":\n          const error = action.error;\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return {\n              ...this.#revertState,\n              fetchStatus: \"idle\"\n            };\n          }\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n        case \"invalidate\":\n          return {\n            ...state,\n            isInvalidated: true\n          };\n        case \"setState\":\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach(observer => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({\n        query: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...(data === void 0 && {\n      error: null,\n      status: \"pending\"\n    })\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query, fetchState };","map":{"version":3,"names":["noop","replaceData","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","initialState","revertState","cache","retryer","observers","defaultOptions","abortSignalConsumed","constructor","config","setOptions","options","queryKey","queryHash","state","getDefaultState","scheduleGc","meta","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","dispatch","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","promise","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","queryFn","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","queryFnContext","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","reject","Error","persister","context","behavior","onFetch","fetchMeta","onError","onSettled","isFetchingOptimistic","fn","abort","bind","onSuccess","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","#dispatch","action","reducer","fetchFailureCount","fetchFailureReason","fetchState","dataUpdateCount","Date","now","status","errorUpdateCount","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["C:\\Users\\wshii\\Desktop\\myproject-Social\\client\\node_modules\\@tanstack\\query-core\\src\\query.ts"],"sourcesContent":["import { noop, replaceData, skipToken, timeUntilStale } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #retryer?: Retryer<TData>\n  #observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.#observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = config.state || getDefaultState(this.options)\n    this.state = this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.#observers.some(\n      (observer) => observer.options.enabled !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    if (this.getObserversCount() > 0) {\n      return this.#observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      this.state.data === undefined ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.#observers.includes(observer)) {\n      this.#observers = this.#observers.filter((x) => x !== observer)\n\n      if (!this.#observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.#observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.#observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Create query function context\n    const queryFnContext: Omit<QueryFunctionContext<TQueryKey>, 'signal'> = {\n      queryKey: this.queryKey,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this.options.queryFn === skipToken) {\n          console.error(\n            `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${this.options.queryHash}'`,\n          )\n        }\n      }\n\n      if (!this.options.queryFn || this.options.queryFn === skipToken) {\n        return Promise.reject(\n          new Error(`Missing queryFn: '${this.options.queryHash}'`),\n        )\n      }\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          this.options.queryFn,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return this.options.queryFn(\n        queryFnContext as QueryFunctionContext<TQueryKey>,\n      )\n    }\n\n    // Trigger behavior hook\n    const context: Omit<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data)\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    return this.#retryer.promise\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}