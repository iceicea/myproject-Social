{"ast":null,"code":"// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, skipToken } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const fetchFn = async () => {\n        const options = context.options;\n        const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n        const oldPages = context.state.data?.pages || [];\n        const oldPageParams = context.state.data?.pageParams || [];\n        const empty = {\n          pages: [],\n          pageParams: []\n        };\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = context.options.queryFn && context.options.queryFn !== skipToken ? context.options.queryFn : () => {\n          if (process.env.NODE_ENV !== \"production\") {\n            if (context.options.queryFn === skipToken) {\n              console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${context.options.queryHash}'`);\n            }\n          }\n          return Promise.reject(new Error(`Missing queryFn: '${context.options.queryHash}'`));\n        };\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(queryFnContext);\n          const {\n            maxPages\n          } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        let result;\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          result = await fetchPage(empty, oldPageParams[0] ?? options.initialPageParam);\n          const remainingPages = pages ?? oldPages.length;\n          for (let i = 1; i < remainingPages; i++) {\n            const param = getNextPageParam(options, result);\n            result = await fetchPage(result, param);\n          }\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(fetchFn, {\n            queryKey: context.queryKey,\n            meta: context.options.meta,\n            signal: context.signal\n          }, query);\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, {\n  pages,\n  pageParams\n}) {\n  const lastIndex = pages.length - 1;\n  return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams);\n}\nfunction getPreviousPageParam(options, {\n  pages,\n  pageParams\n}) {\n  return options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams);\n}\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport { hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"names":["addToEnd","addToStart","skipToken","infiniteQueryBehavior","pages","onFetch","context","query","fetchFn","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","empty","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","process","env","NODE_ENV","console","error","queryHash","Promise","reject","Error","fetchPage","param","previous","length","resolve","queryFnContext","queryKey","pageParam","page","maxPages","addTo","result","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","initialPageParam","remainingPages","i","persister","lastIndex","hasNextPage","hasPreviousPage"],"sources":["C:\\Users\\wshii\\Desktop\\my-project-0314\\client\\node_modules\\@tanstack\\query-core\\src\\infiniteQueryBehavior.ts"],"sourcesContent":["import { addToEnd, addToStart, skipToken } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const fetchFn = async () => {\n        const options = context.options as InfiniteQueryPageParamsOptions<TData>\n        const direction = context.fetchOptions?.meta?.fetchMore?.direction\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const empty = { pages: [], pageParams: [] }\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn && context.options.queryFn !== skipToken\n            ? context.options.queryFn\n            : () => {\n                if (process.env.NODE_ENV !== 'production') {\n                  if (context.options.queryFn === skipToken) {\n                    console.error(\n                      `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${context.options.queryHash}'`,\n                    )\n                  }\n                }\n                return Promise.reject(\n                  new Error(`Missing queryFn: '${context.options.queryHash}'`),\n                )\n              }\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: Omit<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        let result: InfiniteData<unknown>\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          // Fetch first page\n          result = await fetchPage(\n            empty,\n            oldPageParams[0] ?? options.initialPageParam,\n          )\n\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch remaining pages\n          for (let i = 1; i < remainingPages; i++) {\n            const param = getNextPageParam(options, result)\n            result = await fetchPage(result, param)\n          }\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams,\n  )\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return options.getPreviousPageParam?.(\n    pages[0],\n    pages,\n    pageParams[0],\n    pageParams,\n  )\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}